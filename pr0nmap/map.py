from pr0nmap.pimage import PImage
from pr0nmap import pimage
from pr0nmap.tile import Tiler, calc_max_level
from pr0nmap.image_coordinate_map import ImageCoordinateMap
import os
import os.path
import math
'''
Source data for map
Two options:
-A large input image
-Pre-generated tiles (as generated by stitch)
'''


class MapSource:

    def __init__(self):
        pass

    def im_ext(self):
        raise Exception("Implement")

    def width(self):
        return None

    def height(self):
        return None

    def calc_max_level(self):
        return calc_max_level(self.height(), self.width())

    def generate_tiles(self, max_level, min_level, get_tile_name, dst_basedir):
        pass


# Input to map generator algorithm is a large input image
class ImageMapSource(MapSource):

    def __init__(self, image_in, threads=1):
        self.image_in = image_in
        self.pim = PImage.from_file(self.image_in)
        self.threads = threads
        self.tw = 250
        self.th = 250
        _root, extension = os.path.splitext(image_in)
        if extension in (".jpg", ".jpeg"):
            self._im_ext = '.jpg'
        elif extension == ".png":
            self._im_ext = ".png"
            # hack
            pimage.PALETTES = True
        elif extension in (".tif", ".tiff"):
            self._im_ext = ".tif"
        else:
            raise ValueError(f"Unknown image extension {extension}")

    def get_name(self):
        return os.path.basename(self.image_in).split('.')[0]

    def width(self):
        return self.pim.width()

    def height(self):
        return self.pim.height()

    def set_im_ext(self, im_ext):
        self._im_ext = im_ext

    def im_ext(self):
        return self._im_ext

    def generate_tiles(self, max_level, min_level, get_tile_name, dst_basedir):
        # Generate tiles
        print('From single image in %s to dir %s' %
              (self.image_in, dst_basedir))
        rows = int(math.ceil(1.0 * self.pim.height() / self.th))
        cols = int(math.ceil(1.0 * self.pim.width() / self.tw))
        print('%dw x %dh => %dc x %dr' %
              (self.pim.width(), self.pim.height(), cols, rows))
        gen = Tiler(rows,
                    cols,
                    None,
                    max_level,
                    min_level,
                    dst_basedir=dst_basedir,
                    threads=self.threads,
                    pim=self.pim,
                    im_ext=self.im_ext(),
                    get_tile_name=get_tile_name)

        gen.run()


class TileMapSource(MapSource):

    def __init__(self, dir_in, threads=1):
        print('TileMapSource()')
        self.tw = 250
        self.th = 250
        self.threads = threads

        self.file_names = set()
        for f in os.listdir(dir_in):
            # old google maps format is single dir
            # new format is nested dirs
            if os.path.isdir(f):
                pass
            else:
                self.file_names.add(dir_in + "/" + f)
        self.src_dir = dir_in

        self.map = ImageCoordinateMap.from_tagged_file_names(self.file_names)

        self.x_tiles = self.map.width()
        self.y_tiles = self.map.height()

        print('Tile canvas width %d, height %d' %
              (self.width(), self.height()))

        MapSource.__init__(self)

    def im_ext(self):
        return ".jpg"

    def get_name(self):
        # Get the last directory component
        ret = os.path.basename(self.src_dir)
        if ret == '.' or ret == '..':
            ret = 'unknown'
        return ret

    def width(self):
        return self.tw * self.x_tiles

    def height(self):
        return self.th * self.y_tiles

    def generate_tiles(self, max_level, min_level, get_tile_name, dst_basedir):
        print('From multi tiles')
        gen = Tiler(self.map.height(),
                    self.map.width(),
                    self.src_dir,
                    max_level,
                    min_level,
                    dst_basedir=dst_basedir,
                    threads=self.threads,
                    pim=None,
                    im_ext=self.im_ext(),
                    get_tile_name=get_tile_name)
        gen.run()
